version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5.1.1
  python: circleci/python@2.1.1

jobs:
  # 🚀 Universal AWS CDK Deploy Job
  deploy:
    docker:
      - image: cimg/python:3.11-node
    parameters:
      env:
        type: string
        default: "dev"
      region:
        type: string
        default: "ap-southeast-1"

    steps:
      - checkout

      # 🧰 AWS OIDC role assumption
      - aws-cli/setup:
          role_arn: "arn:aws:iam::056198491146:role/CircleCIInfraRole"
          role_session_name: "circleci-deploy-<< parameters.env >>"
          region: "<< parameters.region >>"

      # ⚡ Restore Python & npm caches
      - restore_cache:
          keys:
            - v2-cdk-py-{{ checksum "cdk/requirements.txt" }}
            - v2-cdk-py-
      - restore_cache:
          keys:
            - v2-npm-global-cache

      # 🐍 Setup Python environment & install dependencies
      - run:
          name: 🐍 Setup Python & install dependencies
          command: |
            set -e
            cd cdk
            python -m venv .venv
            . .venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

      # 🧰 Install AWS CDK CLI in user-space (no sudo)
      - run:
          name: 🧰 Install AWS CDK CLI
          command: |
            set -e
            mkdir -p ~/.npm-global
            npm config set prefix '~/.npm-global'
            export PATH="$HOME/.npm-global/bin:$PATH"
            echo 'export PATH=$HOME/.npm-global/bin:$PATH' >> $BASH_ENV
            npm install -g aws-cdk
            echo "✅ CDK CLI version: $(cdk --version)"

      # 💾 Save caches
      - save_cache:
          key: v2-cdk-py-{{ checksum "cdk/requirements.txt" }}
          paths:
            - cdk/.venv
      - save_cache:
          key: v2-npm-global-cache
          paths:
            - ~/.npm

      # 🚀 Deploy CDK stack dynamically
      - run:
          name: 🚀 Deploy CDK stack (<< parameters.env >>)
          command: |
            set -e
            cd cdk
            . .venv/bin/activate

            export AWS_REGION="<< parameters.region >>"
            echo "🌎 Deploying environment: << parameters.env >>"
            echo "🧭 AWS Account: $AWS_ACCOUNT_ID"
            echo "📍 AWS Region: $AWS_REGION"

            cdk bootstrap aws://$AWS_ACCOUNT_ID/$AWS_REGION
            cdk deploy --require-approval never -c env=<< parameters.env >>

workflows:
  deploy_pipeline:
    jobs:
      - deploy:
          name: deploy-dev
          env: dev
          region: ap-southeast-1
      - hold-for-approval:
          type: approval
          requires:
            - deploy-dev
      - deploy:
          name: deploy-prod
          env: prod
          region: ap-southeast-1
          requires:
            - hold-for-approval