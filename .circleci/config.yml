version: 2.1

orbs:
  python: circleci/python@2.1.1

jobs:
  deploy:
    docker:
      - image: cimg/python:3.11
    parameters:
      env_name:
        type: string
    steps:
      - checkout

      # ‚ö° Cache AWS CLI & CDK to speed up future builds
      - restore_cache:
          keys:
            - awscli-cdk-v1

      - run:
          name: Install AWS CLI and CDK (cached)
          command: |
            # Install AWS CLI if missing
            if ! command -v aws &> /dev/null; then
              echo "Installing AWS CLI..."
              sudo apt-get update -y && sudo apt-get install -y awscli
            else
              echo "AWS CLI already installed"
            fi

            # Install AWS CDK globally if missing
            if ! command -v cdk &> /dev/null; then
              echo "Installing AWS CDK globally..."
              sudo npm install -g aws-cdk
            else
              echo "AWS CDK already installed"
            fi

      - save_cache:
          key: awscli-cdk-v1
          paths:
            - /usr/bin/aws
            - /usr/local/lib/node_modules/aws-cdk

      # üß© Assume AWS Role via OIDC
      - run:
          name: Assume AWS OIDC Role
          command: |
            echo "Assuming role via OIDC..."
            export AWS_ROLE_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:role/CircleCIInfraRole"
            export AWS_WEB_IDENTITY_TOKEN_FILE="${CIRCLE_OIDC_TOKEN_FILE}"
            export AWS_REGION="${AWS_REGION}"
            aws sts get-caller-identity

      # üêç Python setup for CDK
      - run:
          name: Setup Python & install dependencies
          command: |
            cd cdk
            python -m venv .venv
            . .venv/bin/activate
            pip install -r requirements.txt
            pip install aws-cdk-lib constructs

      # üöÄ Deploy Stack
      - run:
          name: Bootstrap & deploy stack
          command: |
            cd cdk
            . .venv/bin/activate
            cdk bootstrap aws://$AWS_ACCOUNT_ID/$AWS_REGION
            cdk deploy \
              -c env=<< parameters.env_name >> \
              -c main_bucket_name=$MAIN_BUCKET_NAME \
              -c log_bucket_name=$LOG_BUCKET_NAME \
              -c instance_type=$INSTANCE_TYPE \
              -c nat_gateways=$NAT_GATEWAYS \
              --require-approval never

# üß≠ Workflow: Dev ‚Üí Approval ‚Üí Prod
workflows:
  deploy_flow:
    jobs:
      - deploy:
          name: Deploy to Dev
          env_name: "dev"
          filters:
            branches:
              only: main

      - hold-for-approval:
          type: approval
          requires:
            - Deploy to Dev

      - deploy:
          name: Deploy to Prod
          env_name: "prod"
          requires:
            - hold-for-approval
          filters:
            branches:
              only: main
