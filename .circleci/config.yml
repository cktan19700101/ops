# .circleci/config.yml
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5.1.1

jobs:
  test-oidc:
    docker:
      - image: cimg/base:stable  # Includes curl, jq, bash, base64

    steps:
      - checkout

      - run:
          name: üîß Environment Info
          command: |
            echo "‚úÖ CircleCI Environment:"
            echo "  ORG ID:      $CIRCLE_ORGANIZATION_ID"
            echo "  PROJECT ID:  $CIRCLE_PROJECT_ID"
            echo "  USER:        $CIRCLE_USERNAME"
            echo "  BRANCH:      $CIRCLE_BRANCH"
            echo "----------------------------------------"

      # üîë Step 1: Explicitly request the OIDC token manually
      - run:
          name: üîë Request CircleCI OIDC Token
          command: |
            echo "üîç Requesting OIDC token manually from CircleCI..."

            TOKEN_URL="https://oidc.circleci.com/org/${CIRCLE_ORGANIZATION_ID}/project/${CIRCLE_PROJECT_ID}/token"
            echo "Using audience: https://aws.amazon.com"
            TOKEN=$(curl -s -X POST -d "audience=https://aws.amazon.com" "$TOKEN_URL" | jq -r '.token')

            if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
              echo "‚ùå Failed to retrieve OIDC token from CircleCI."
              exit 1
            fi

            echo "‚úÖ Token successfully retrieved."
            echo "$TOKEN" | head -c 40 && echo "..."

            # Save for later steps (write to workspace or env var)
            echo "$TOKEN" > token.jwt

      # üß† Step 2: Decode & inspect token before touching AWS
      - run:
          name: üß† Decode & Inspect CircleCI OIDC Token
          command: |
            echo "----------------------------------------"
            echo "üîç Decoding OIDC Token (iss, aud, sub):"
            cat token.jwt | awk -F. '{print $2}' | base64 -d 2>/dev/null | jq '{iss, aud, sub}'
            echo "----------------------------------------"

            echo "üîç Full token claims (for debugging only):"
            cat token.jwt | awk -F. '{print $2}' | base64 -d 2>/dev/null | jq .
            echo "----------------------------------------"

      # üßæ Optional Step 3: Use AWS CLI with the token file (if you want to test)
      - run:
          name: ‚öôÔ∏è Test AWS Role Assumption Manually
          command: |
            echo "üîç Testing manual AWS STS AssumeRoleWithWebIdentity..."
            aws sts assume-role-with-web-identity \
              --role-arn arn:aws:iam::056198491146:role/CircleCIInfraRole \
              --role-session-name circleci-oidc-test \
              --web-identity-token file://token.jwt \
              --region ap-southeast-1 || {
                echo "‚ùå Role assumption failed ‚Äî check 'aud' and trust policy."
                exit 1
              }

      # üßæ Step 4 (optional): proceed with orb after verification
      - aws-cli/setup:
          role_arn: "arn:aws:iam::056198491146:role/CircleCIInfraRole"
          role_session_name: "circleci-oidc-test"
          region: "ap-southeast-1"
          profile_name: "oidc-test"
          session_duration: "3600"
          use_oidc: true

      - run:
          name: üß† Verify AWS Identity (after orb)
          command: |
            aws sts get-caller-identity --profile oidc-test || {
              echo "‚ùå Failed to assume role."
              exit 1
            }

workflows:
  verify-oidc:
    jobs:
      - test-oidc
